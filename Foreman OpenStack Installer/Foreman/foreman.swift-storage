This guide is based on:

https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux_OpenStack_Platform/5/html/Installation_and_Configuration_Guide/sect-Configure_the_Object_Storage_Service.html
https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux_OpenStack_Platform/5/html/Configuration_Reference_Guide/rsyncd-configuration.html
https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux_OpenStack_Platform/5/html/Installation_and_Configuration_Guide/Validating_the_Object_Storage_Service_Installation.html

It describes using Foreman OSP Installer with and HA deployment where the 3 controllers are also Swift Storage hosts with 4 devices each.

1. Prepare the partition tables in the OSP Installer

We create the /srv/node mount points with the allocated disks using the OpenStack Default Partition Table in the OSP Installer. This Partition should be applied to the Swift Storage nodes (the 3 HA controllers in this example).

#Dynamic
zerombr
clearpart --all --initlabel
part /boot --fstype ext3 --size=500 --ondisk=sda
part swap --size=1024 --ondisk=sda
part pv.01 --size=1024 --grow --ondisk=sda
part pv.02 --size=1024 --grow --ondisk=sdb
part pv.03 --size=1024 --grow --ondisk=sdc
part pv.04 --size=1024 --grow --ondisk=sdd
part pv.05 --size=1024 --grow --ondisk=sde
volgroup vg_root pv.01
volgroup vg_swift1 pv.02
volgroup vg_swift2 pv.03
volgroup vg_swift3 pv.04
volgroup vg_swift4 pv.05
logvol  /  --vgname=vg_root  --size=1 --grow --name=lv_root
logvol  /srv/node/device1 --vgname=vg_swift1  --size=1 --grow --name=lv_swift1
logvol  /srv/node/device2  --vgname=vg_swift2  --size=1 --grow --name=lv_swift2
logvol  /srv/node/device3  --vgname=vg_swift3  --size=1 --grow --name=lv_swift3
logvol  /srv/node/device4  --vgname=vg_swift4  --size=1 --grow --name=lv_swift4

2. Set the Advanced Configuration options of the OSP Deployment.

First create and HA deployment. Then, in the Foreman OSP Installer we need to setup Puppet in Advanced Configuration in the Deployment:

HA (Controller):

    Include swift: true

Keystone (HA):

    Swift: true 

Swift (HA):

    Swift internal vip: A free IP which will be used by Puppet to:
       a. rsync the /etc/swift directory between the nodes
       b. For the Swift S3 endpoints created with keystone
    Swift storage device: device1
    Swift storage ips: <%= @host.deployment.network_query.controller_ips('Storage') %> or <%= @host.network_query.controller_ips('Storage') %>

Then, if we also want Glance backed by Swift, again in Advanced Settings of the Deployment:
 
Glance (HA):

   Backend: swift
   Swift store auth address: http://192.168.1.150:5000/v2.0 # Note: I don't know how to figure this out before first deploying
   Swift store user: glance
   Swift store key: da8574029f01e8b1ff27e83c0f7e791d
   Pcmk fs manage: false

3. In the Controller Host Group parameters (this can't be done in Advanced Settings)

   Override quickstack::pacemaker::params swift_user_password:
       swift_user_password = any_password_you_like

4. After deployment is done, create the rings in the deployed hosts for all the devices.

Build the rings for account, container and boject for each device and node:

  swift-ring-builder /etc/swift/account.builder add z1-192.168.1.101:6002/device1 100
  swift-ring-builder /etc/swift/account.builder add z1-192.168.1.101:6002/device2 100
  swift-ring-builder /etc/swift/account.builder add z1-192.168.1.101:6002/device3 100
  swift-ring-builder /etc/swift/account.builder add z1-192.168.1.101:6002/device4 100

  swift-ring-builder /etc/swift/container.builder add z1-192.168.1.101:6001/device1 100
  swift-ring-builder /etc/swift/container.builder add z1-192.168.1.101:6001/device2 100
  swift-ring-builder /etc/swift/container.builder add z1-192.168.1.101:6001/device3 100
  swift-ring-builder /etc/swift/container.builder add z1-192.168.1.101:6001/device4 100

  swift-ring-builder /etc/swift/object.builder add z1-192.168.1.101:6000/device1 100
  swift-ring-builder /etc/swift/object.builder add z1-192.168.1.101:6000/device2 100
  swift-ring-builder /etc/swift/object.builder add z1-192.168.1.101:6000/device3 100
  swift-ring-builder /etc/swift/object.builder add z1-192.168.1.101:6000/device4 100

  swift-ring-builder /etc/swift/account.builder add z1-192.168.1.102:6002/device1 100
  swift-ring-builder /etc/swift/account.builder add z1-192.168.1.102:6002/device2 100
  swift-ring-builder /etc/swift/account.builder add z1-192.168.1.102:6002/device3 100
  swift-ring-builder /etc/swift/account.builder add z1-192.168.1.102:6002/device4 100

  swift-ring-builder /etc/swift/container.builder add z1-192.168.1.102:6001/device1 100
  swift-ring-builder /etc/swift/container.builder add z1-192.168.1.102:6001/device2 100
  swift-ring-builder /etc/swift/container.builder add z1-192.168.1.102:6001/device3 100
  swift-ring-builder /etc/swift/container.builder add z1-192.168.1.102:6001/device4 100

  swift-ring-builder /etc/swift/object.builder add z1-192.168.1.102:6000/device1 100
  swift-ring-builder /etc/swift/object.builder add z1-192.168.1.102:6000/device2 100
  swift-ring-builder /etc/swift/object.builder add z1-192.168.1.102:6000/device3 100
  swift-ring-builder /etc/swift/object.builder add z1-192.168.1.102:6000/device4 100

  swift-ring-builder /etc/swift/account.builder add z1-192.168.1.103:6002/device1 100
  swift-ring-builder /etc/swift/account.builder add z1-192.168.1.103:6002/device2 100
  swift-ring-builder /etc/swift/account.builder add z1-192.168.1.103:6002/device3 100
  swift-ring-builder /etc/swift/account.builder add z1-192.168.1.103:6002/device4 100

  swift-ring-builder /etc/swift/container.builder add z1-192.168.1.103:6001/device1 100
  swift-ring-builder /etc/swift/container.builder add z1-192.168.1.103:6001/device2 100
  swift-ring-builder /etc/swift/container.builder add z1-192.168.1.103:6001/device3 100
  swift-ring-builder /etc/swift/container.builder add z1-192.168.1.103:6001/device4 100

  swift-ring-builder /etc/swift/object.builder add z1-192.168.1.103:6000/device1 100
  swift-ring-builder /etc/swift/object.builder add z1-192.168.1.103:6000/device2 100
  swift-ring-builder /etc/swift/object.builder add z1-192.168.1.103:6000/device3 100
  swift-ring-builder /etc/swift/object.builder add z1-192.168.1.103:6000/device4 100

  swift-ring-builder /etc/swift/account.builder rebalance
  swift-ring-builder /etc/swift/container.builder rebalance
  swift-ring-builder /etc/swift/object.builder rebalance

  chown -R root:swift /etc/swift
  scp /etc/swift/*gz 192.168.1.102:/etc/swift/
  scp /etc/swift/*gz 192.168.1.103:/etc/swift/

5. Install the packages needed for Swift storage on the three nodes:

 yum -y install openstack-swift-container openstack-swift-account openstack-swift-object

 systemctl enable openstack-swift-account
 systemctl enable openstack-swift-container
 systemctl enable openstack-swift-object

 systemctl start openstack-swift-account
 systemctl start openstack-swift-container
 systemctl start openstack-swift-object

6. Start the Swift Proxy service in all the nodes:

  systemctl enable openstack-swift-proxy

  systemctl start openstack-swift-proxy

  systemctl status openstack-swift-proxy


7. Setup the replicators

If we need to install Swift Proxy and Swift storage together (this is the case for this example with Swift Storage in the HA controllers) we need to create a new setup for the replicators in each node.

Create this in the three nodes with the IP of the storage subnet in each host.

Create /etc/rsync-swift_storage.conf (example can be found at /usr/share/doc/openstack-swift-object-1.13.1/rsyncd.conf-sample):

pid file = /var/run/rsyncd.pid
uid = nobody
gid = nobody
use chroot = no
log format = %t %a %m %f %b
syslog facility = local3
timeout = 300
address = 192.168.1.102

[account]
max connections = 2
path = /srv/node
read only = false
lock file = /var/lock/account.lock

[container]
max connections = 4
path = /srv/node
read only = false
lock file = /var/lock/container.lock

[object]
max connections = 8
path = /srv/node
read only = false
lock file = /var/lock/object.lock

Then also /etc/xinetd.d/rsync-swift_storage where 192.168.1.102 is the local IP of the storage network:

service rsync
{
        port = 873
        disable = no
        socket_type = stream
        protocol = tcp
        wait = no
        user = root
        group = root
        server = /usr/bin/rsync
        bind = 192.168.1.102
        server_args = --daemon --config /etc/rsync-swift_storage.conf

}

Now restart xinetd and start all the replicators. This process is needed in all the storage nodes.

 systemctl restart xinetd
 
 systemctl enable openstack-swift-account-replicator
 systemctl enable openstack-swift-container-replicator
 systemctl enable openstack-swift-object-replicator

 systemctl start openstack-swift-account-replicator
 systemctl start openstack-swift-container-replicator
 systemctl start openstack-swift-object-replicator

 systemctl -l status openstack-swift-account-replicator
 systemctl -l status openstack-swift-container-replicator
 systemctl -l status openstack-swift-object-replicator
